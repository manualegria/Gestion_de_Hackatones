@page "/mentors"
@using CurrieTechnologies.Razor.SweetAlert2
@using Hackatones.Shered.Entities
@using Hackatones.WEB.Repositories
@using Hackatones.WEB.Shared;


@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h1>OwnersIndex</h1>

     
<h3>Mentors</h3>
<div class="mb-3"> 
    <a class="btn btn-primary" href="/mentors/Create"> Agregar mentor</a>

</div>

<GeneralList MyList="Mentors">

     <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Mentor</th>


                </tr>
            </thead>
            <tbody>
                @foreach (var mentor in Mentors!)
                {
                    <tr>

                        <td>
                            @mentor.Name
                        </td>

                        <td>
                            @mentor.LastName
                        </td>
                        <td>
                            @mentor.Email
                        </td>

                        <td>
                            @mentor.Phone
                        </td>

                        <td>
                            @mentor.Epecialty
                        </td>

                    



                        <td>
                            <a class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger">Borrar</button>

                        </td>


                    </tr>
                }
            </tbody>
        </table>

     </Body>

</GeneralList>


@code {

    public List<Mentor> Mentors { get; set; }

    protected async override Task OnInitializedAsync()

    {
        await Load();
    }

    private async Task Load()
    {
        var responseHTTP = await repository.GetAsync<List<Mentor>>("/api/mentors");

        Mentors = responseHTTP.Response!;
    }

    private async Task DeleteAsync(Mentor Mentor)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Mentor>($"api/Mentors/{Mentor.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
  
}
