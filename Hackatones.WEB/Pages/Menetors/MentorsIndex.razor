@page "/mentores"

@using Hackatones.Shered.Entities
@using Hackatones.WEB.Repositories
@using Hackatones.WEB.Shared


@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

@* <h1>Mentorndex</h1> *@

@if (Mentors is null)
{
    <div class="spinner"/>
}
else
{


<GeneralList MyList="Mentors">
    <Body>

        <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Mentores 
                        <a class="btn btn-sm btn-primary float-end" href="/Mentores/create"><i class="oi oi-plus"></i> Crear Mentor</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    </div>
                </div>
                </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Email</th>
                    <th>Teléfono</th>
                    <th>Especialidad</th>
                    

                </tr>
            </thead>
            <tbody>
                @foreach (var mentor in Mentors!)
                {
                    <tr>
                        <td>@mentor.Name</td>
                        <td>@mentor.LastName</td>
                        <td>@mentor.Email</td>
                        <td>@mentor.Phone</td>
                        <td>@mentor.Epecialty</td>
                        <td>
                            <a href="/Mentores/edit/@mentor.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(mentor))><i class="oi oi-trash" /> Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GeneralList>
}

@code {

    public List<Mentor> Mentors { get; set; }

    protected async override Task OnInitializedAsync()

    {
        await Load();
    }

    private async Task Load()
    {
        var responseHTTP = await repository.GetAsync<List<Mentor>>("/api/mentores");
        Mentors = responseHTTP.Response!;
    }

    private async Task DeleteAsync(Mentor Mentor)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/mentores/{Mentor.Id}");
        

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
  
}
