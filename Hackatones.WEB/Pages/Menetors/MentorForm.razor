@using Hackatones.Shered.Entities


@inject SweetAlertService swal
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <label>Nombre:</label>

        <div>
            <InputText width="10" @bind-Value="Mentor.Name" />
            <ValidationMessage For="@(()=>Mentor.Name )" />

        </div>

    </div>

    <div class="mb-3">
        <label>Apellidos:</label>

        <div>
            <InputText width="10" @bind-Value="Mentor.LastName" />
            <ValidationMessage For="@(()=>Mentor.LastName)" />

        </div>
    </div>


    <div class="mb-3">
        <label>Correo:</label>


        <div>
            <InputText width="10" @bind-Value="Mentor.Email" />
            <ValidationMessage For="@(()=>Mentor.Email)" />

        </div>

    </div>

    <div class="mb-3">
        <label>Telefono:</label>

        <div>
            <InputNumber width="10" @bind-Value="Mentor.Phone" />
            <ValidationMessage For="@(()=>Mentor.Phone)" />

        </div>
    </div>

    <div class="mb-3">
        <label>Especialidad:</label>

        <div>
            <InputText width="10" @bind-Value="Mentor.Epecialty" />
            <ValidationMessage For="@(()=>Mentor.Epecialty)" />

        </div>
    </div>

 


    <button class="btn btn-primary" type="submit">guardar</button>
    <button class="btn btn-success" onclick="returnaction">regresar</button>



</EditForm>



@code {
    private EditContext editContext = null;

    protected override void OnInitialized()
    {
        editContext = new(Mentor);
    }


    [EditorRequired]
    [Parameter]
    public Mentor Mentor { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]

    public EventCallback ReturnAction { get; set; }


    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}