@using Hackatones.Shared.Entities
@using Hackatones.Shered.Entities

@inject IRepository Repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">

        <label>Premio:</label>

        <div>
            <InputText width="10" @bind-Value="Award.AWardName" />
            <ValidationMessage For="@(()=>Award.AWardName )" />

        </div>

    </div>

    <div class="mb-3">
        <label>Descripcion:</label>

        <div>
            <InputText width="10" @bind-Value="Award.Description" />
            <ValidationMessage For="@(()=>Award.Description)" />

        </div>
    </div>


    <div class="mb-3">
        <label>VAlor:</label>


        <div>
            <InputNumber width="10" @bind-Value="Award.Value" />
            <ValidationMessage For="@(()=>Award.Value)" />

        </div>

    </div>

    <div class="mb-3">
        <label>Categoria:</label>

        <div>
            <InputText width="10" @bind-Value="Award.Category" />
            <ValidationMessage For="@(()=>Award.Category)" />

        </div>
    </div>

    <div class="mb-3">
        <label>Hackatón:</label>
        <InputSelect @bind-Value="Award.HackatonId">
            <option value="">Seleccione un hackatón</option>
            @foreach (var hackaton in hackatones)
            {
                <option value="@hackaton.Id">@hackaton.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Award.HackatonId)" />
    </div>



    <button class="btn btn-primary" type="submit">guardar</button>
    <button class="btn btn-success" onclick="returnaction">regresar</button>



</EditForm>



@code {
    private EditContext editContext = null;
    private List<Hackaton> hackatones = new List<Hackaton>();

    protected override void OnInitialized()
    {
        editContext = new(Award);
       // await LoadHackatones(); // Carga los hackatones desde la API
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadHackatones();
    }

    // Método para cargar los hackatones desde la API
    private async Task LoadHackatones()
    {
        var response = await Repository.GetAsync<List<Hackaton>>("api/award");

        if (!response.Error && response.HttpResponseMessage.IsSuccessStatusCode) // Verifica que no haya error
        {
            hackatones = response.Response;
        }
        else
        {
            var errorMessage = await response.GetErrorMessageAsync();
            await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
    }


    [EditorRequired]
    [Parameter]
    public Award Award { get; set; }


    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]

    public EventCallback ReturnAction { get; set; }


    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}