// <auto-generated />
using System;
using Hackatones.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hackatones.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241005231354_clear")]
    partial class clear
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hackatones.Shared.Entities.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AWardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("HackatonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HackatonId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FunctionalityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InnovationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.MentorHackaton", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("HackatonId")
                        .HasColumnType("int");

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("HackatonId");

                    b.HasIndex("MentorId");

                    b.ToTable("MentorHackatons");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("HackatonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepositoryUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("int");

                    b.Property<int>("TemsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HackatonId");

                    b.HasIndex("TeamsId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.TeamAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwardId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamAwards");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.TeamMentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MentorId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMentors");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Hackaton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MainTopic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Hackatons");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Epecialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("developmentExperience")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("experienceDesign")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("managementExperience")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MentorId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("numberMembers")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<DateTime>("registrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.TeamParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("IncorporationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamParticipants");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Award", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Hackaton", "Hackatons")
                        .WithMany()
                        .HasForeignKey("HackatonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hackatons");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Evaluation", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Mentor", "Mentors")
                        .WithMany("Evaluations")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shared.Entities.Project", "Projects")
                        .WithMany("Evaluations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentors");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.MentorHackaton", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Hackaton", "Hackatons")
                        .WithMany("MentorHackatons")
                        .HasForeignKey("HackatonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shered.Entities.Mentor", "Mentors")
                        .WithMany("MentorHackatons")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hackatons");

                    b.Navigation("Mentors");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Project", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Hackaton", "Hackatons")
                        .WithMany()
                        .HasForeignKey("HackatonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shered.Entities.Team", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamsId");

                    b.Navigation("Hackatons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.TeamAward", b =>
                {
                    b.HasOne("Hackatones.Shared.Entities.Award", "Awards")
                        .WithMany("TeamAwards")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shered.Entities.Team", "Teams")
                        .WithMany("TeamAward")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awards");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.TeamMentor", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Mentor", "Mentors")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shered.Entities.Team", "Teams")
                        .WithMany("TeamMentors")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentors");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Team", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Mentor", null)
                        .WithMany("Teams")
                        .HasForeignKey("MentorId");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.TeamParticipant", b =>
                {
                    b.HasOne("Hackatones.Shered.Entities.Participant", "Participants")
                        .WithMany("TeamParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hackatones.Shered.Entities.Team", "Teams")
                        .WithMany("TeamParticipants")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Award", b =>
                {
                    b.Navigation("TeamAwards");
                });

            modelBuilder.Entity("Hackatones.Shared.Entities.Project", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Hackaton", b =>
                {
                    b.Navigation("MentorHackatons");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Mentor", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("MentorHackatons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Participant", b =>
                {
                    b.Navigation("TeamParticipants");
                });

            modelBuilder.Entity("Hackatones.Shered.Entities.Team", b =>
                {
                    b.Navigation("TeamAward");

                    b.Navigation("TeamMentors");

                    b.Navigation("TeamParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
